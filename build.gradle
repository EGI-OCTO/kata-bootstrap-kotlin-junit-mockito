buildscript {
    ext {
        kotlinVersion = '1.2.70'
        junitJupiterVersion = '5.3.1'
        junitPlatformVersion = '1.3.1'
        mockitoVersion = '2.23.0'
        assertJVersion = '3.11.1'
        pitestGradlePluginVersion = '1.3.0'
        pitestJunit5PluginVersion = '0.8'
    }
    repositories {
        mavenCentral()
    }
    configurations.maybeCreate('pitest')
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:${pitestGradlePluginVersion}")
        pitest("org.pitest:pitest-junit5-plugin:${pitestJunit5PluginVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-jpa"
apply plugin: 'org.jetbrains.kotlin.jvm'

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
}

apply plugin: 'info.solidsoft.pitest'

pitest {
    pitestVersion = '1.4.3'
    testPlugin = 'junit5'
    targetClasses = ['area.*']
    outputFormats = ['XML', 'HTML']
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testImplementation("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.assertj:assertj-core:${assertJVersion}")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standard_error"
        showStackTraces false
        showCauses true
        exceptionFormat = 'full'
    }
}

wrapper {
    gradleVersion = '4.6'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

